#####################################################################
# Start Macro Definition
#####################################################################


########################################
############# Start Print ##############
########################################
[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(55)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}

    status_off
    
    M117 Print Starting
    status_homing
    G28 X Y ;(Home X & Y Axis)
    G90 ;Absolute positioning
    M220 S100 ;Reset Feedrate
    M221 S100 ;Reset Flowrate
    G92 E0 ;Reset Extruder


    #setup skew correction
    #SKEW_PROFILE LOAD=my_skew_profile

    status_heating

    #Preheat nozzle and bed
    M140 S{BED_TEMP} ; Set Heat Bed temperature
    #M104 S{EXTRUDER_TEMP} T0; start warming extruder to preheat temp
    M190 S{BED_TEMP} ; Wait for Heat Bed temperature

    M117 Bed Heating...


################## Homing ##################
    M117 Homing All...
    # Clear Previous mesh
    BED_MESH_CLEAR
    G90 #(Absolute Coordinates)
    #M83 #(Relative Extrusion)
    status_homing
    G28 #(Home All Axis)

    M117 Generating mesh...

   status_meshing
    
    # Use the bed mesh
    BED_MESH_CALIBRATE PROFILE=default ADAPTIVE=1

    G90 ; Absolute XYZ

    G0 X0 Y0 F10000

    M117 Nozzle Heating...
    #Heat nozzle and bed
    
    status_heating
    
    M109 S{EXTRUDER_TEMP} T0; start warming extruder to preheat temp

    # https://www.reddit.com/r/klippers/comments/yxarvy/it_is_possible_to_begin_a_job_if_above_start_temp/
    #SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    #TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP} MAXIMUM={EXTRUDER_TEMP+5}

    status_printing

    # Purge Line
    VORON_PURGE

    M117 Printing...
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10


#####################################################################
# End Macro Definition
#####################################################################

[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    # Wait for buffer to clear
    M400
    status_part_ready
    G92 E0                         ; zero the extruder
    # move z up
    G91
    G1 E-1 Z+5 F3000
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    #G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear

    # AFTER_PRINT_CLEAN_NOZZLE

    G0 X{th.axis_maximum.x -2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear

    TURN_OFF_HEATERS
    
    M84 X Y Z E ;Disable motors

    # Clear Pressure Advance
    SET_PRESSURE_ADVANCE ADVANCE=0.0
    M117 Pressure Advance Set 0.0

    #Clear skew correction
    #SKEW_PROFILE CLEAR=my_skew_profile

    BED_MESH_CLEAR

    # Print Finished Message
    M117 Print Finished
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#####################################################################
# Start Macro Definition
#####################################################################
########################################
### Display                          ###
########################################

[delayed_gcode clear_display]
gcode:
    M117

######################
# GitHub Config Backup
######################

[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash /home/pi/klipper-backup/script.sh
timeout: 90.0
verbose: True


#####################################################################
# Printer Tuning
#####################################################################

##################
# Z Height
##################

[gcode_macro Probe_Z_Height]
gcode:
   status_homing
   G28
   status_calibrating_z
   PROBE_CALIBRATE
   status_ready

##################
# Bed Screw Adjust
##################

[gcode_macro automatic_bed_screw_adjust]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
      status_homing
      G28
    {% endif %}
    
    status_leveling
    SCREWS_TILT_CALCULATE
    status_ready

##################
# Z Accuracy
##################

[gcode_macro Z_Probe_Accuray]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
      status_homing
      G28
    {% endif %}
   status_calibrating_z
   PROBE_ACCURACY
   status_ready
   

##################
# Input Shaper
##################

[gcode_macro Accelerometer_Connection_Test]
gcode:
    ACCELEROMETER_QUERY

[gcode_macro X_Axis_Resonance_Test]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

    AXES_SHAPER_CALIBRATION AXIS=X

[gcode_macro Y_Axis_Resonance_Test]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
  AXES_SHAPER_CALIBRATION AXIS=Y

[gcode_macro Z_Axis_Resonance_Test]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
   AXES_SHAPER_CALIBRATION AXIS=Z
   
[gcode_macro Axes_Noise_Test]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
   MEASURE_AXES_NOISE
   
[gcode_macro Excite_Axis_At_Frequency]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
    EXCITATE_AXIS_AT_FREQ

[gcode_macro Compare_Belts]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
    COMPARE_BELTS_RESPONSES

####################################
# Initial StartUp Checks
####################################
[gcode_macro Stepper_Buzz_X]
gcode:
    STEPPER_BUZZ STEPPER=stepper_x

[gcode_macro Stepper_Buzz_Y]
gcode:
    STEPPER_BUZZ STEPPER=stepper_y

[gcode_macro Stepper_Buzz_Z]
gcode:
    STEPPER_BUZZ STEPPER=stepper_z
    
    
########################################
### Max Speed+Accel                  ###
########################################
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED